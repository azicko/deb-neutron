Description: Replaces Alembic commands by SQLite 3 compatible statements.
 SQLite 3 doesn't support the DROP column statement, neither adding a
 UNIQUE property on-the-fly. This patch adds the necessary statements to
 do it in a SQLite 3 compatible way.
Author: Thomas Goirand <zigo@debian.org>
Bug-Debian: http://bugs.debian.org/726719
Bug-Ubuntu: https://launchpad.net/bugs/1241952
Forwarded: https://review.openstack.org/#/c/52636
Last-Update: 2014-10-03

--- neutron-2014.2~rc1.orig/neutron/db/migration/alembic_migrations/versions/50d5ba354c23_ml2_binding_vif_details.py
+++ neutron-2014.2~rc1/neutron/db/migration/alembic_migrations/versions/50d5ba354c23_ml2_binding_vif_details.py
@@ -50,6 +50,45 @@ def upgrade():
             "UPDATE ml2_port_bindings SET"
             " vif_details = '{\"port_filter\": false}'"
             " WHERE cap_port_filter = 0")
+        op.drop_column('ml2_port_bindings', 'cap_port_filter')
+    elif op.get_bind().engine.name == 'sqlite':
+        op.execute("CREATE TEMPORARY TABLE ml2_port_bindings_backup ( "
+            "port_id VARCHAR(36) NOT NULL, "    
+            "host VARCHAR(255) NOT NULL, "      
+            "vif_type VARCHAR(64) NOT NULL, "   
+            "cap_port_filter BOOLEAN NOT NULL, "
+            "driver VARCHAR(64), " 
+            "segment VARCHAR(36), "
+            "vnic_type VARCHAR(64) DEFAULT 'normal' NOT NULL, "
+            "vif_details VARCHAR(4095) DEFAULT '' NOT NULL, "
+            "PRIMARY KEY (port_id), "
+            "FOREIGN KEY(port_id) REFERENCES ports (id) ON DELETE CASCADE, "
+            "FOREIGN KEY(segment) REFERENCES ml2_network_segments (id) ON DELETE SET NULL, "
+            "CHECK (cap_port_filter IN (0, 1)));") 
+        op.execute("INSERT INTO ml2_port_bindings_backup "
+            "(port_id,host,vif_type,cap_port_filter,driver,segment,vnic_type) "
+            "SELECT port_id,host,vif_type,cap_port_filter,driver,segment,vnic_type "
+            "FROM ml2_port_bindings;")
+        for value in ('true', 'false'):
+            op.execute("UPDATE ml2_port_bindings_backup SET"
+                       " vif_details = '{\"port_filter\": %(value)s}'"
+                       " WHERE cap_port_filter = '%(value)s'" % {'value': value})
+        op.execute("DROP TABLE ml2_port_bindings")
+        op.execute("CREATE TABLE ml2_port_bindings ( "
+            "port_id VARCHAR(36) NOT NULL, " 
+            "host VARCHAR(255) NOT NULL, "   
+            "vif_type VARCHAR(64) NOT NULL, "
+            "driver VARCHAR(64), " 
+            "segment VARCHAR(36), "
+            "vnic_type VARCHAR(64) DEFAULT 'normal' NOT NULL, "
+            "vif_details VARCHAR(4095) DEFAULT '' NOT NULL, "
+            "PRIMARY KEY (port_id), "
+            "FOREIGN KEY(port_id) REFERENCES ports (id) ON DELETE CASCADE, "
+            "FOREIGN KEY(segment) REFERENCES ml2_network_segments (id) ON DELETE SET NULL);")
+        op.execute("INSERT INTO ml2_port_bindings "
+            "SELECT port_id,host,vif_type,driver,segment,vnic_type,vif_details "
+            "FROM ml2_port_bindings_backup;")
+        op.execute("DROP TABLE ml2_port_bindings_backup")
     else:
         op.execute(
             "UPDATE ml2_port_bindings SET"
@@ -59,7 +98,7 @@ def upgrade():
             "UPDATE ml2_port_bindings SET"
             " vif_details = '{\"port_filter\": false}'"
             " WHERE cap_port_filter = false")
-    op.drop_column('ml2_port_bindings', 'cap_port_filter')
+        op.drop_column('ml2_port_bindings', 'cap_port_filter')
     if op.get_bind().engine.name == 'ibm_db_sa':
         op.execute("CALL SYSPROC.ADMIN_CMD('REORG TABLE ml2_port_bindings')")
 
--- neutron-2014.2~rc1.orig/neutron/db/migration/alembic_migrations/versions/e197124d4b9_add_unique_constrain.py
+++ neutron-2014.2~rc1/neutron/db/migration/alembic_migrations/versions/e197124d4b9_add_unique_constrain.py
@@ -36,11 +36,15 @@ TABLE_NAME = 'members'
 
 def upgrade():
     if migration.schema_has_table(TABLE_NAME):
-        op.create_unique_constraint(
-            name=CONSTRAINT_NAME,
-            source=TABLE_NAME,
-            local_cols=['pool_id', 'address', 'protocol_port']
-        )
+        if op.get_bind().engine.name == 'sqlite':
+            op.execute("CREATE UNIQUE INDEX uniq_member0pool_id0address0port "
+                       "on members (pool_id,address,protocol_port);")
+        else:
+            op.create_unique_constraint(
+                name=CONSTRAINT_NAME,
+                source=TABLE_NAME,
+                local_cols=['pool_id', 'address', 'protocol_port']
+            )
 
 
 def downgrade():
--- neutron-2014.2~rc1.orig/neutron/db/migration/alembic_migrations/versions/abc88c33f74f_lb_stats_needs_bigint.py
+++ neutron-2014.2~rc1/neutron/db/migration/alembic_migrations/versions/abc88c33f74f_lb_stats_needs_bigint.py
@@ -34,14 +34,15 @@ from neutron.db import migration
 
 def upgrade():
     if migration.schema_has_table('poolstatisticss'):
-        op.alter_column('poolstatisticss', 'bytes_in',
-                        type_=sa.BigInteger(), existing_type=sa.Integer())
-        op.alter_column('poolstatisticss', 'bytes_out',
-                        type_=sa.BigInteger(), existing_type=sa.Integer())
-        op.alter_column('poolstatisticss', 'active_connections',
-                        type_=sa.BigInteger(), existing_type=sa.Integer())
-        op.alter_column('poolstatisticss', 'total_connections',
-                        type_=sa.BigInteger(), existing_type=sa.Integer())
+        if op.get_bind().engine.name != 'sqlite':
+            op.alter_column('poolstatisticss', 'bytes_in',
+                            type_=sa.BigInteger(), existing_type=sa.Integer())
+            op.alter_column('poolstatisticss', 'bytes_out',
+                            type_=sa.BigInteger(), existing_type=sa.Integer())
+            op.alter_column('poolstatisticss', 'active_connections',
+                            type_=sa.BigInteger(), existing_type=sa.Integer())
+            op.alter_column('poolstatisticss', 'total_connections',
+                            type_=sa.BigInteger(), existing_type=sa.Integer())
 
 
 def downgrade():
--- neutron-2014.2~rc1.orig/neutron/db/migration/alembic_migrations/versions/1fcfc149aca4_agents_unique_by_type_and_host.py
+++ neutron-2014.2~rc1/neutron/db/migration/alembic_migrations/versions/1fcfc149aca4_agents_unique_by_type_and_host.py
@@ -41,11 +41,15 @@ def upgrade():
         # configured plugin did not create the agents table.
         return
 
-    op.create_unique_constraint(
-        name=UC_NAME,
-        source=TABLE_NAME,
-        local_cols=['agent_type', 'host']
-    )
+    if op.get_bind().engine.name == 'sqlite':
+        op.execute("CREATE UNIQUE INDEX uniq_agents0agent_type0host "
+                   "on agents (agent_type,host);")
+    else:
+        op.create_unique_constraint(
+            name=UC_NAME,
+            source=TABLE_NAME,
+            local_cols=['agent_type', 'host']
+        )
 
 
 def downgrade():
